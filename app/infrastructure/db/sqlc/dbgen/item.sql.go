// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: item.sql

package sqlc

import (
	"context"
)

const deleteItem = `-- name: DeleteItem :exec
DELETE FROM items
WHERE id = $1
`

// itemの削除
func (q *Queries) DeleteItem(ctx context.Context, itemid string) error {
	_, err := q.db.ExecContext(ctx, deleteItem, itemid)
	return err
}

const getItemByID = `-- name: GetItemByID :one
SELECT id, group_id, name, created_at, updated_at
FROM items
WHERE id = $1
`

// itemIDからitemを取得するクエリ
func (q *Queries) GetItemByID(ctx context.Context, itemID string) (Item, error) {
	row := q.db.QueryRowContext(ctx, getItemByID, itemID)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.GroupID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getItemsByGroupID = `-- name: GetItemsByGroupID :many
SELECT id, group_id, name, created_at, updated_at
FROM items
WHERE group_id = $1
ORDER BY created_at ASC
`

// groupID から item をすべて取得するクエリ
func (q *Queries) GetItemsByGroupID(ctx context.Context, groupID string) ([]Item, error) {
	rows, err := q.db.QueryContext(ctx, getItemsByGroupID, groupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Item
	for rows.Next() {
		var i Item
		if err := rows.Scan(
			&i.ID,
			&i.GroupID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertItem = `-- name: InsertItem :exec
INSERT INTO items (
    id,
    group_id,
    name,
    created_at,
    updated_at
)
VALUES (
    $1,
    $2,
    $3,
    NOW(),
    NOW()
)
`

type InsertItemParams struct {
	ID      string
	GroupID string
	Name    string
}

// itemの追加
func (q *Queries) InsertItem(ctx context.Context, arg InsertItemParams) error {
	_, err := q.db.ExecContext(ctx, insertItem, arg.ID, arg.GroupID, arg.Name)
	return err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: event.sql

package sqlc

import (
	"context"
	"time"
)

const deleteEvent = `-- name: DeleteEvent :exec
DELETE FROM
    events
WHERE
    id = ?
`

func (q *Queries) DeleteEvent(ctx context.Context, eventid string) error {
	_, err := q.db.ExecContext(ctx, deleteEvent, eventid)
	return err
}

const findEvent = `-- name: FindEvent :one
SELECT
    id, user_id, together, description, year, month, day, date, created_at, updated_at, start_date, end_date, important
FROM
    events
WHERE
    id = ?
`

func (q *Queries) FindEvent(ctx context.Context, eventid string) (Event, error) {
	row := q.db.QueryRowContext(ctx, findEvent, eventid)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Together,
		&i.Description,
		&i.Year,
		&i.Month,
		&i.Day,
		&i.Date,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.StartDate,
		&i.EndDate,
		&i.Important,
	)
	return i, err
}

const findMonthEventIDs = `-- name: FindMonthEventIDs :many
SELECT
    id
FROM
    events
WHERE
    year = ? AND month = ?
`

type FindMonthEventIDsParams struct {
	Year  int32
	Month int32
}

func (q *Queries) FindMonthEventIDs(ctx context.Context, arg FindMonthEventIDsParams) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, findMonthEventIDs, arg.Year, arg.Month)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var id string
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertEvent = `-- name: UpsertEvent :exec
INSERT INTO
    events (
        id,
        user_id,
        together,
        description,
        year,
        month,
        day,
        date,
        start_date,
        end_date,
        created_at,
        updated_at,
        important
    )
VALUES
    (
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        NOW(),
        NOW(),
        ?
    ) ON DUPLICATE KEY
UPDATE
    user_id = ?,
    together = ?,
    description = ?,
    year = ?,
    month = ?,
    day = ?,
    date = ?,
    start_date = ?,
    end_date = ?,
    updated_at = NOW(),
    important = ?
`

type UpsertEventParams struct {
	ID          string
	UserID      string
	Together    bool
	Description string
	Year        int32
	Month       int32
	Day         int32
	Date        time.Time
	StartDate   time.Time
	EndDate     time.Time
	Important   bool
}

func (q *Queries) UpsertEvent(ctx context.Context, arg UpsertEventParams) error {
	_, err := q.db.ExecContext(ctx, upsertEvent,
		arg.ID,
		arg.UserID,
		arg.Together,
		arg.Description,
		arg.Year,
		arg.Month,
		arg.Day,
		arg.Date,
		arg.StartDate,
		arg.EndDate,
		arg.Important,
		arg.UserID,
		arg.Together,
		arg.Description,
		arg.Year,
		arg.Month,
		arg.Day,
		arg.Date,
		arg.StartDate,
		arg.EndDate,
		arg.Important,
	)
	return err
}

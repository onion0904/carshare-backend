// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: group.sql

package sqlc

import (
	"context"
)

const addEventToGroup = `-- name: AddEventToGroup :exec
INSERT INTO
    group_events (group_id, event_id)
VALUES
    (
        ?,
        ?
    )
ON DUPLICATE KEY UPDATE
    group_id = ?, 
    event_id = ?
`

type AddEventToGroupParams struct {
	Groupid string
	Eventid string
}

func (q *Queries) AddEventToGroup(ctx context.Context, arg AddEventToGroupParams) error {
	_, err := q.db.ExecContext(ctx, addEventToGroup,
		arg.Groupid,
		arg.Eventid,
		arg.Groupid,
		arg.Eventid,
	)
	return err
}

const addUserToGroup = `-- name: AddUserToGroup :exec
INSERT INTO
    group_users (group_id, user_id)
VALUES
    (
        ?,
        ?
    )
ON DUPLICATE KEY UPDATE
    group_id = ?, 
    user_id = ?
`

type AddUserToGroupParams struct {
	Groupid string
	Userid  string
}

func (q *Queries) AddUserToGroup(ctx context.Context, arg AddUserToGroupParams) error {
	_, err := q.db.ExecContext(ctx, addUserToGroup,
		arg.Groupid,
		arg.Userid,
		arg.Groupid,
		arg.Userid,
	)
	return err
}

const deleteGroup = `-- name: DeleteGroup :exec
DELETE FROM
    ` + "`" + `groups` + "`" + `
WHERE
    id = ?
`

func (q *Queries) DeleteGroup(ctx context.Context, groupid string) error {
	_, err := q.db.ExecContext(ctx, deleteGroup, groupid)
	return err
}

const findGroup = `-- name: FindGroup :one
SELECT
    id,
    name,
    icon,
    created_at,
    updated_at
FROM
    ` + "`" + `groups` + "`" + `
WHERE
    id = ?
`

func (q *Queries) FindGroup(ctx context.Context, groupid string) (Group, error) {
	row := q.db.QueryRowContext(ctx, findGroup, groupid)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Icon,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getEventIDsByGroupID = `-- name: GetEventIDsByGroupID :many
SELECT
    ge.event_id
FROM
    group_events ge
WHERE
    ge.group_id = ?
`

func (q *Queries) GetEventIDsByGroupID(ctx context.Context, groupid string) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getEventIDsByGroupID, groupid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var event_id string
		if err := rows.Scan(&event_id); err != nil {
			return nil, err
		}
		items = append(items, event_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserIDsByGroupID = `-- name: GetUserIDsByGroupID :many
SELECT
    gu.user_id
FROM
    group_users gu
WHERE
    gu.group_id = ?
`

func (q *Queries) GetUserIDsByGroupID(ctx context.Context, groupid string) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getUserIDsByGroupID, groupid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var user_id string
		if err := rows.Scan(&user_id); err != nil {
			return nil, err
		}
		items = append(items, user_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeUserFromGroup = `-- name: RemoveUserFromGroup :exec
DELETE FROM 
    group_users
WHERE 
    group_id = ? AND user_id = ?
`

type RemoveUserFromGroupParams struct {
	GroupID string
	UserID  string
}

func (q *Queries) RemoveUserFromGroup(ctx context.Context, arg RemoveUserFromGroupParams) error {
	_, err := q.db.ExecContext(ctx, removeUserFromGroup, arg.GroupID, arg.UserID)
	return err
}

const upsertGroup = `-- name: UpsertGroup :exec
INSERT INTO
    ` + "`" + `groups` + "`" + ` (
        id,
        name,
        icon,
        created_at,
        updated_at
    )
VALUES
    (
        ?,
        ?,
        ?,
        NOW(),
        NOW()
    ) ON DUPLICATE KEY
UPDATE
    name = ?,
    icon = ?,
    updated_at = NOW()
`

type UpsertGroupParams struct {
	ID   string
	Name string
	Icon string
}

func (q *Queries) UpsertGroup(ctx context.Context, arg UpsertGroupParams) error {
	_, err := q.db.ExecContext(ctx, upsertGroup,
		arg.ID,
		arg.Name,
		arg.Icon,
		arg.Name,
		arg.Icon,
	)
	return err
}
